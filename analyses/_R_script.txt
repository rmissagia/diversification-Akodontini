#Code by Daniel Casali and Rafaela Missagia
library(geomorph)
library(phytools)
library(geiger)
library(ggpubr)
library(ggplot2)
library(ggtree)
library(scales)
library(adiv)
library(dispRity)
library(PhylogeneticEM)
library(RevGadgets)
library(openxlsx)
library(tidyr)
library(reshape)
library(caper)
library(evobiR)
library(BAMMtools)
library(coda)
library(nlme)

###################################################################################################################################################
########################################################GEOMETRIC_MORPHOMETRICS####################################################################
###################################################################################################################################################

#loading TPS files, defining speciesID
ventral_prov <- readland.tps(file = "ventral.tps", specID = "imageID", negNA = TRUE)
ventral <- estimate.missing(ventral_prov, method = "TPS")
lateral_prov <- readland.tps(file = "lateral.tps", specID = "imageID", negNA = TRUE)
lateral <- estimate.missing(lateral_prov, method = "TPS")
mandible_prov <- readland.tps(file = "mandible.tps", specID = "imageID", negNA = TRUE)
mandible <- estimate.missing(mandible_prov, method = "TPS")
landmarks<-list(ventral,lateral,mandible)

#lists defining groups (spp)
ventral_list <- read.csv("ventral_list.csv", header = T, sep = ",")
lateral_list <- read.csv("lateral_list.csv", header = T, sep = ",")
mandible_list <- read.csv("mandible_list.csv", header = T, sep = ",")

groups<-list(ventral_list,lateral_list,mandible_list)

#GPA
GPA<-vector(mode="list",length=length(landmarks))
lands2d<-vector(mode="list",length=length(landmarks))
GPA2<-vector(mode="list",length=length(landmarks))
for (i in 1:length(groups))
{
	GPA[[i]] <- gpagen(landmarks[[i]])
	lands2d[[i]] <- two.d.array(GPA[[i]]$coords)
	GPA2[[i]] <- arrayspecs(lands2d[[i]], length(landmarks[[i]][,,1][,1]), 2)
}

#symmetric component - ventral view only
ind<-as.factor(groups[[1]][,2])#list of individuals for symmetric component extraction
pairs<-as.matrix(read.csv("ventral_lmpairs.csv", header=T, sep = ","))#landmarks pairs on each side of bilateral symmetry
gdf <- geomorph.data.frame(shape = GPA2[[1]], ind = ind)
sym <- bilat.symmetry(A = shape, ind = ind, object.sym = TRUE, land.pairs = pairs, data = gdf, RRPP = TRUE, iter = 149)
sym2 <- two.d.array(sym$symm.shape)
sym2

#logsize
logCS_species_avg<-vector(mode="list",length=length(groups))
logCS_species_sd<-vector(mode="list",length=length(groups))
for (i in 1:length(groups))
{
	spp<-as.factor(groups[[i]][,1])#list of specific groupings
	Csize2d <- log(GPA[[i]]$Csize)
	logCS_species_avg[[i]] <- aggregate(Csize2d, by = list(spp), FUN = mean)
	colnames(logCS_species_avg[[i]])<-c("Taxon","Avg.")
	logCS_species_sd[[i]] <- aggregate(Csize2d, by = list(spp), FUN = sd)
	colnames(logCS_species_sd[[i]])<-c("Taxon","SD")
}
logCS_species<-list(logCS_species_avg,logCS_species_sd)
names(logCS_species)<-c("logCS_avg","logCS_sd")
saveRDS(logCS_species,"logCS_species.rds")

#taking the average value of landmarks by species
colnames(sym2)<-colnames(lands2d[[1]])
landmarks2<-list(sym2,lands2d[[2]],lands2d[[3]])
sppmean<-vector(mode="list",length=length(landmarks2))
sppmean3d<-vector(mode="list",length=length(landmarks2))
for (i in 1:length(landmarks2))
{	
	spp<-as.factor(groups[[i]][,1])#list of specific groupings
	sppmean[[i]] <-aggregate(landmarks2[[i]], by = list(spp), FUN=mean)[,2:(length(landmarks2[[i]][1,])+1)]
	rownames(sppmean[[i]])<-levels(spp)
	sppmean3d[[i]] <-arrayspecs(sppmean[[i]], length(landmarks2[[i]][1,])/2, 2, sep=".")
}

#PCA (species)
pca<-vector(mode="list",length=length(sppmean3d))
pcs<-vector(mode="list",length=length(sppmean3d))
for (i in 1:length(sppmean3d))
{
	pca[[i]] <- gm.prcomp(sppmean3d[[i]],tol=0)
	pcs[[i]] <- pca[[i]]$x
}
pcs
saveRDS(pcs,"PCs_species.rds")

#loading outlines for plotting shape changes on each component
lands_ventral<-readland.tps(file = "ventral_out.TPS")
lands_lateral<-readland.tps(file = "lateral_out.TPS")
lands_mandible<-readland.tps(file = "mandible_out.TPS")	
lands<-list(lands_ventral,lands_lateral,lands_mandible)
out_ventral<-warpRefOutline(file = "ventral_out.csv", lands[[1]][,,1], mshape(sppmean3d[[1]]))
out_lateral<-warpRefOutline(file = "lateral_out.csv", lands[[2]][,,1], mshape(sppmean3d[[2]]))
out_mandible<-warpRefOutline(file = "mandible_out.csv", lands[[3]][,,1], mshape(sppmean3d[[3]]))
out<-list(out_ventral,out_lateral,out_mandible)

##plotting shape changes by outlines
titles<-c("Ventral","Lateral","Mandible")
pdf("Ako_outlines.pdf")
for (i in 1:length(sppmean3d))
{
	ref <- mshape(sppmean3d[[i]])	
	
	plotRefToTarget(ref,pca[[i]]$shapes$shapes.comp1$min,outline=out[[i]]$outline)
	title(titles[[i]],"pc1 min")
	plotRefToTarget(ref,pca[[i]]$shapes$shapes.comp1$max,outline=out[[i]]$outline)
	title(titles[[i]],"pc1 max")	
	plotRefToTarget(ref,pca[[i]]$shapes$shapes.comp2$min,outline=out[[i]]$outline)
	title(titles[[i]],"pc2 min")
	plotRefToTarget(ref,pca[[i]]$shapes$shapes.comp2$max,outline=out[[i]]$outline)
	title(titles[[i]],"pc2 max")
}
dev.off()

#PGLS allometry

tr <- read.tree("AKO_TREE.nwk")#read tree
allometry<-vector(mode="list",length=length(landmarks2))
for (i in 1:length(landmarks2))
{
	prov_shape<-sppmean[[i]]
	coords <-two.d.array(arrayspecs(prov_shape[,1:ncol(prov_shape)], length(prov_shape[1,])/2, 2))
	size<-as.matrix(logCS_species_avg[[i]]$Avg.)
	rownames(size)<-logCS_species_avg[[i]]$Taxon
	pgls_data<- geomorph.data.frame(SHAPE = coords, SIZE = size, phy = tr)
	allometry[[i]] <- procD.pgls(SHAPE~SIZE, data = pgls_data, phy, iter = 999, print.progress = TRUE)
}
summary(allometry[[1]])
summary(allometry[[2]])
summary(allometry[[3]])

wb<-createWorkbook()
addWorksheet(wb, "Ventral")
addWorksheet(wb, "Lateral")
addWorksheet(wb, "Mandible")
writeData(wb, 1, allometry[[1]]$aov.table)
writeData(wb, 2, allometry[[2]]$aov.table)
writeData(wb, 3, allometry[[3]]$aov.table)
saveWorkbook(wb, "Allometry_aov.xlsx", overwrite=TRUE)

#Size correlation and average
VL<-cor.test(logCS_species_avg[[1]]$Avg.,logCS_species_avg[[2]]$Avg.)
VM<-cor.test(logCS_species_avg[[1]]$Avg.,logCS_species_avg[[3]]$Avg.)
LM<-cor.test(logCS_species_avg[[2]]$Avg.,logCS_species_avg[[3]]$Avg.)
VL
VM
LM

size_avg<-as.data.frame(matrix(ncol=2,nrow=length(tr$tip.label)))
colnames(size_avg)<-c("Taxon","Size")
for (i in 1:length(tr$tip.label))
{
	size_avg[i,1]<-levels(logCS_species_avg[[1]]$Taxon)[i]
	size_avg[i,2]<-mean(logCS_species_avg[[1]]$Avg.[i],logCS_species_avg[[2]]$Avg.[i],logCS_species_avg[[3]]$Avg.[i])
}
size_avg

#partial disparities

PD<-vector(mode="list",length=length(landmarks2))
for (i in 1:length(landmarks2))
{
	spp <- as.factor(groups[[i]][,1])#list of specific groupings
	gdf <- geomorph.data.frame(landmarks2[[i]], species = spp)
	partialDisp <- morphol.disparity(landmarks2[[i]]~1, group = spp, data=gdf, partial = T)
	PD[[i]] <- partialDisp$Procrustes.var
}
names(PD)<-titles
PD

###################################################################################################################################################
##############################################################NODE_DISPARITY#######################################################################
###################################################################################################################################################

#DECDIV
#read tree
tr<-read.tree("AKO_TREE.nwk")
titles<-c("Ventral","Lateral","Mandible","Size")
#calculate euclidean distances for each dataset
skull_ventral<-dist(pcs[[1]])
skull_lateral<-dist(pcs[[2]])
mandible<-dist(pcs[[3]])
s<-as.matrix(size_avg[,2])
rownames(s)<-size_avg[,1]
size<-dist(s)
all_dist<-list(skull_lateral,skull_ventral,mandible,size)

#set_comm_table - just to indicate that all species will be treated with the same weights regarding abundance
comm<-rep(1,length(tr$tip))
names(comm)<-tr$tip.label

#calculate disparity decomposed per nodes

decdiv_list<-vector(mode="list", length=length(all_dist))
names(decdiv_list)<-c("Skull lateral","Skull ventral","Mandible","Size")
for (i in 1:length(all_dist))
{
	decdiv_list[[i]]<-decdiv(tr, comm, dis = all_dist[[i]], option = 4, formula = "EDI")
}
saveRDS(decdiv_list,"decdiv_results.RDS")

#test_statistics
test_list<-vector(mode="list", length=length(all_dist))
names(test_list)<-titles
for (i in 1:length(all_dist))
{
	test_list[[i]]<- rtestdecdiv(tr, comm, dis = all_dist[[i]], option = 4, formula = "EDI", vranking = "droot", ties.method = "average",
	statistic = 1:3, nrep = 1000)
}
saveRDS(test_list,"decdiv_test_results.RDS")
summary<-data.frame(c(test_list[[1]]$obs,test_list[[1]]$pvalue),c(test_list[[2]]$obs,test_list[[2]]$pvalue),c(test_list[[3]]$obs,test_list[[3]]$pvalue),
c(test_list[[4]]$obs,test_list[[4]]$pvalue))
summary<-t(summary)
rownames(summary)<-titles
colnames(summary)<-c("Single node - Obs","Few nodes - Obs","RootTip skew - Obs","Single node p-value","Few nodes p-value","RootTip skew p-value")
summary
write.csv(summary,"decdiv_stats.csv")

##plot
par(mfrow=c(1,4))
tr<-read.tree("AKO_TREE.nwk")
labels<-as.data.frame(tr$tip.label)
colnames(labels)<-"taxa"
sep<-separate(labels,taxa,c("G","S"),sep="_")
unt<-unite(sep,taxa,c("G","S"),sep=" ")
tr$tip.label<-unt$taxa
color<-c(rep("blue",51,),rep("red",8),"black",rep("blue",50),rep("red",7))
d<- data.frame(node=c(1:117),color=color)
title_list<-c("A) Skull (lateral view)","B) Skull (ventral view)","C) Mandible","D) Size")

decdiv_results<-readRDS("decdiv_results.rds")
data1<-data.frame(c(rep(0,length(tr$tip.label)),decdiv_results[[1]]))
colnames(data1)<-c("rates")
data2<-data.frame(c(rep(0,length(tr$tip.label)),decdiv_results[[2]]))
colnames(data2)<-c("rates")
data3<-data.frame(c(rep(0,length(tr$tip.label)),decdiv_results[[3]]))
colnames(data3)<-c("rates")
data4<-data.frame(c(rep(0,length(tr$tip.label)),decdiv_results[[4]]))
colnames(data4)<-c("rates")

fig1<-revts(ggtree(tr, size=0.8, layout = "rectangular", ladderize=TRUE, right=TRUE)%<+% d + aes(color=I(color))) + geom_nodepoint(aes(size=data1$rates)) + geom_tiplab(fontface="italic", size=2, color="black")+
xlim_tree(3) + scale_x_continuous(breaks=seq(-8,0,1), labels=abs(seq(-8,0,1))) + theme_tree2()+ labs (size="Disparity", title=title_list[1])+
theme(legend.title=element_text(size=10), legend.position="bottom", legend.text=element_text(size=10),axis.text.x=element_text(size=10))
fig2<-revts(ggtree(tr, size=0.8, layout = "rectangular", ladderize=TRUE, right=TRUE)%<+% d + aes(color=I(color))) + geom_nodepoint(aes(size=data2$rates)) + geom_tiplab(fontface="italic", size=2, color="black")+
xlim_tree(3) + scale_x_continuous(breaks=seq(-8,0,1), labels=abs(seq(-8,0,1))) + theme_tree2()+ labs (size="", title=title_list[2])+
theme(legend.title=element_text(size=10), legend.position="bottom", legend.text=element_text(size=10),axis.text.x=element_text(size=10))
fig3<-revts(ggtree(tr, size=0.8, layout = "rectangular", ladderize=TRUE, right=TRUE)%<+% d + aes(color=I(color))) + geom_nodepoint(aes(size=data3$rates)) + geom_tiplab(fontface="italic", size=2, color="black")+
xlim_tree(3) + scale_x_continuous(breaks=seq(-8,0,1), labels=abs(seq(-8,0,1))) + theme_tree2()+ labs (size="", title=title_list[3])+
theme(legend.title=element_text(size=10), legend.position="bottom", legend.text=element_text(size=10),axis.text.x=element_text(size=10))
fig4<-revts(ggtree(tr, size=0.8, layout = "rectangular", ladderize=TRUE, right=TRUE)%<+% d + aes(color=I(color))) + geom_nodepoint(aes(size=data4$rates)) + geom_tiplab(fontface="italic", size=2, color="black")+
xlim_tree(3) + scale_x_continuous(breaks=seq(-8,0,1), labels=abs(seq(-8,0,1))) + theme_tree2()+ labs (size="", title=title_list[4])+
theme(legend.title=element_text(size=10), legend.position="bottom", legend.text=element_text(size=10),axis.text.x=element_text(size=10))

fig<-ggarrange(fig1,fig2,fig3,fig4, ncol = 4, nrow = 1, common.legend = FALSE, legend="bottom")
fig
ggsave("DECDIV_FIG.pdf",fig,width=14,height=6)
ggsave("DECDIV_FIG.svg",fig,width=14,height=6)

####################################################################################################################################################
##############################################################CLADE_DISPARITY#######################################################################
####################################################################################################################################################

#some definitions...
metric_list<-list(c(sum, variances),c(sum, variances),c(sum, variances),c(variances))
taxon_list_c<-data.frame(tr$tip.label,c(rep("B_clade",51),rep("A_clade",8)))
colnames(taxon_list_c)<-c("Taxon","Clade")
taxon_list_b<-taxon_list_c[order(taxon_list_c$Taxon),]
taxon_list<-taxon_list_b$Clade
taxon_list
titles<-c("Skull lateral","Skull ventral","Mandible","Size")

##set data (PCs and logCS)
#calculate euclidean distances for each dataset
skull_ventral<-pcs[[1]]
skull_lateral<-pcs[[2]]
mandible<-pcs[[3]]
size<-as.matrix(size_avg[,2])
rownames(size)<-size_avg[,1]
all_data<-list(skull_lateral,skull_ventral,mandible,size)

#CALCULATE_DISPARITY
clade_disparity<-vector(mode="list",length=length(all_data))
clade_DISP<-vector(mode="list",length=length(all_data))
clade_DISP_wilcoxon<-vector(mode="list",length=length(all_data))
clade_DISP_bhatt<-vector(mode="list",length=length(all_data))
for (i in 1:length(all_data))
{
	sub_clade<-custom.subsets(all_data[[i]], list(A = which(taxon_list=="A_clade"), B = which(taxon_list=="B_clade")))
	bootstrapped_data <- boot.matrix(sub_clade, bootstraps = 10000, rarefaction = "min")
	clade_disparity[[i]] <- dispRity(bootstrapped_data, metric = metric_list[[i]])
	clade_DISP[[i]]<-summary(clade_disparity[[i]])
	clade_DISP_wilcoxon[[i]]<-test.dispRity(clade_disparity[[i]], wilcox.test)
	clade_DISP_bhatt[[i]]<-test.dispRity(clade_disparity[[i]], bhatt.coeff)
}
dispRity_results<-list(clade_disparity,clade_DISP,clade_DISP_wilcoxon,clade_DISP_bhatt)
saveRDS(dispRity_results,"dispRity_results.rds")

#STATS
dataset<-c(rep("Skull lateral",3),rep("Skull ventral",3),rep(c(rep("Mandible",3),rep("Size",3))))
clade_disp<-do.call(rbind,clade_DISP)
summary_DISP<-data.frame(dataset,clade_disp)
summary_DISP<-summary_DISP[-c(7:8)]
colnames(summary_DISP)<-c("Dataset","Clade","N","SV_Obs","Median_BS","0.025_BS","0.975_BS")
summary_DISP

statistic_W<-unlist(clade_DISP_wilcoxon)[c(1,3,5,7)]
p_value<-unlist(clade_DISP_wilcoxon)[c(2,4,6,8)]
b_coeff<-unlist(clade_DISP_bhatt)
summary_stats<-data.frame(titles,round(statistic_W,2),round(p_value,2),round(b_coeff,2))
colnames(summary_stats)<-c("Dataset","Statistic W","P-value","Bhattacharyya Coefficient")
summary_stats

wb<-createWorkbook()
addWorksheet(wb, "Disparity")
addWorksheet(wb, "Test_stats")
writeData(wb, 1, summary_DISP)
writeData(wb, 2, summary_stats)
saveWorkbook(wb, "disparity_stats.xlsx", overwrite=TRUE)

#PLOT
	A_clade<-c(rep("Clade A",10000))
	B_clade<-c(rep("Clade B",10000))
	clade_plot_disp<-vector(mode="list",length=length(clade_disparity))
	for (i in 1:length(clade_disparity))
	{
		sum_A_clade<-as.vector(clade_disparity[[i]]$disparity$A[[2]])
		sum_B_clade<-as.vector(clade_disparity[[i]]$disparity$B[[3]])
		
		SV_A_clade<-data.frame(A_clade,sum_A_clade)
		colnames(SV_A_clade)<-c("Group","Sum_of_variances")
		SV_B_clade<-data.frame(B_clade,sum_B_clade)
		colnames(SV_B_clade)<-c("Group","Sum_of_variances")
		clades_to_plot<-rbind(SV_A_clade, SV_B_clade)
		ylab_list<-c(rep("Sum of variances",3),rep("Variance",1))
		
		ci <- function(x)
		{
			exit <- quantile(x, probs = c(0.025,0.975))
			names(exit) <- c("ymin","ymax")
			return(exit) 
		}
	
		median <- function(x)
		{
			exit <- quantile(x, probs = c(0.5))
			names(exit) <- c("y")
			return(exit) 
		}	
		
		cols<-c("red","blue")
		clades_to_plot$Group<-factor(clades_to_plot$Group,levels=c("Clade A","Clade B"))
		clade_plot_disp[[i]]<-ggplot(clades_to_plot, aes(x=Group, y=Sum_of_variances, colour=Group, fill=Group),alpha=0.9) +
		geom_violin(alpha=0.5, show.legend=T) + labs(x="", y="") +
		xlab("") +
		ylab(ylab_list[i]) +
		scale_fill_manual(values=cols) +
		scale_colour_manual(values=cols) +
		stat_summary(fun=ci, geom="line", size=0.6) +
		stat_summary(fun=median, geom="point", size=2.5) +
		theme_bw() + labs("") +
		theme(legend.title=element_blank(), legend.position="bottom", legend.text=element_text(size=12), plot.title=element_text(size=14,face= "bold",hjust=0.5),
		axis.text.x=element_blank(), axis.text.y=element_text(size=10), axis.ticks.x=element_blank(), axis.title.x=element_text(size=12),axis.title.y=element_text(size=12),
		panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
		scale_y_continuous(labels=label_number(accuracy=0.001 ,decimal.mark=".")) +
		ggtitle(titles[i])
	}
	DISP_plot<-ggarrange(clade_plot_disp[[1]],clade_plot_disp[[2]],clade_plot_disp[[3]],clade_plot_disp[[4]],
	ncol = 2, nrow = 2, common.legend = TRUE, legend="bottom",align="hv")
	DISP_plot	
	ggsave("disparity.pdf",DISP_plot,width=8, height=8)
	ggsave("disparity.svg",DISP_plot,width=8, height=8)	

####################################################################################################################################################
##############################################################MORPHO_RATES##########################################################################
####################################################################################################################################################

#Phylogenetic EM - obtaining reasonable values for the number of rate shifts to be added as a pior in RevBayes script

tr <- read.tree("AKO_TREE.nwk")#read tree
Skull_ventral<-t(ReorderData(tr, pcs[[1]][,1:8]))
Skull_lateral<-t(ReorderData(tr, pcs[[2]][,1:8]))
Mandible<-t(ReorderData(tr, pcs[[3]][,1:8]))
Size<-t(ReorderData(tr, size))

#PhylogeneticEM
skull_vent<-PhyloEM(tr, Skull_ventral, process = "scOU", Ncores = 6, methods.segmentation="best_single_move")
saveRDS(skull_vent,"skull_vent.rds")
skull_lat<-PhyloEM(tr, Skull_lateral, process = "scOU", Ncores = 6, methods.segmentation="best_single_move")
saveRDS(skull_lat,"skull_lat.rds")
mandible<-PhyloEM(tr, Mandible, process = "scOU", Ncores = 6, methods.segmentation="best_single_move")
saveRDS(mandible,"mandible.rds")
size<-PhyloEM(tr, Size, process = "OU", Ncores = 6, methods.segmentation="best_single_move")
saveRDS(size,"size.rds")

pdf("PhylogeneticEM_plots.pdf",width=15, height=5)
plot(skull_lat)
plot(skull_vent)
plot(mandible)
plot(size)
dev.off()

#read RevBayes trees
skull_ventral<-readTrees("skull_ventral_MAP.tre")
skull_lateral<-readTrees("skull_lateral_MAP.tre")
mandible<-readTrees("jaw_map.tre")
size<-readTrees("size_MAP.tre")
all_trees<-list(skull_ventral,skull_lateral,mandible,size)
title_list<-c("Skull ventral","Skull lateral","Mandible","Size")

#make fast plots
plots<-vector(mode="list",length=length(title_list))
for (i in 1:length(title_list))
{
	plots[[i]]<-plotTree(all_trees[[i]], ladderize=F, color_branch_by="branch_rates") + ggtitle(title_list[[i]])
}
pdf("RevBayes_rates.pdf")
plots
dev.off()

#get tip labels x taxon names
labels<-data.frame(c(1:length(skull_lateral[[1]][[1]]@phylo$tip.label)),skull_lateral[[1]][[1]]@phylo$tip.label)
colnames(labels)<-c("Number","Taxon")
labels

##get species rates from trees

all_rates<-vector(mode="list",length=length(all_trees))
for (i in 1:length(all_trees))
{
	rates_data<-as.data.frame(all_trees[[i]][[1]][[1]]@data)
	rates_data$node<-as.numeric(rates_data$node)
	rates_data$branch_rates<-as.numeric(rates_data$branch_rates)
	x1<-rates_data[order(rates_data$node),]
	x2<-x1[is.na(x1$posterior),][c(2,6)]
	colnames(x2)<-c(title_list[i],"Number")
	rates_data<-merge(labels,x2,by="Number")
	all_rates[[i]]<-rates_data
}
names(all_rates)<-title_list

###join rates
skull_rates<-merge(all_rates[[1]][,2:3],all_rates[[2]][,2:3],by="Taxon")
other_rates<-merge(all_rates[[3]][,2:3],all_rates[[4]][,2:3],by="Taxon")
ako_rates<-merge(skull_rates,other_rates,by="Taxon")
ako_rates

###############################################################################################################################################
###############################################################PHYLOMORPHOSPACE################################################################
###############################################################################################################################################

#get rates
all_rates2<-vector(mode="list",length=length(all_trees))
for (i in 1:length(all_trees))
{
	rates_data2<-as.data.frame(all_trees[[i]][[1]][[1]]@data)
	rates_data2$node<-as.numeric(rates_data2$node)
	rates_data2$branch_rates<-as.numeric(rates_data2$branch_rates)
	x<-rates_data2[order(rates_data2$node),]
	rates_data2<-x[c(2,6)]
	all_rates2[[i]]<-rates_data2
}
names(all_rates2)<-title_list

#create continuous color list

control_list<-vector(mode="list",length=length(pcs))
for (i in 1:length(pcs))
{
	rates<-all_rates2[[i]]
	ord<-rates[order(rates$branch_rates),]
	ord$label<-NA
	ord$label[1]<-1
	for (j in 2:(length(ord$branch_rates)-1))
	{
		if (ord$branch_rates[j]==ord$branch_rates[j-1]){ord$label[j]<-ord$label[j-1]} 
		else {ord$label[j]<-ord$label[j-1]+1}
	}
	palette<- colorRampPalette(c("blue","red"))(length(unique(ord$label))-1)
	cols<-data.frame(c(1:(length(unique(ord$label))-1)),palette)
	colnames(cols)<-c("label","hex")
	cols_joint<-merge(ord,cols,by="label")
	cols_joint[117,]<-c(31,0,60,"black")
	cols_joint$node<-as.numeric(cols_joint$node)
	cols_final<-cols_joint[order(cols_joint$node),]
	cols_final
	col<-cols_final$hex
	names(col)<-cols_final$node
	control_list[[i]]<-list(col.edge=col,col.node=col)
}
names(control_list)<-title_list[1:3]

#Phylomorphospace

tree<-all_trees[[1]][[1]][[1]]@phylo
pcs<-readRDS("PCs_species.rds")

svg("skull_ventral_pms.svg")
colors<-control_list[[1]]$col.node
phylomorphospace(tree, pcs[[1]][,1:2], label=c("off"), node.size=c(0,1.2), control=control_list[[1]])
	add.color.bar(0.045,sort(colors[colors!="black"]),title="Rates",lims=range(all_rates2[[1]]$branch_rates[-60]),digits=10,prompt=FALSE,
	x=0.01*par()$usr[1],y=0.8*par()$usr[3])
dev.off()

svg("skull_lateral_pms.svg")
colors<-control_list[[2]]$col.node
phylomorphospace(tree, pcs[[2]][,1:2], label=c("off"), node.size=c(0,1.2), control=control_list[[2]])
	add.color.bar(0.045,sort(colors[colors!="black"]),title="Rates",lims=range(all_rates2[[2]]$branch_rates[-60]),digits=10,prompt=FALSE,
	x=0.01*par()$usr[1],y=0.8*par()$usr[3])
dev.off()

svg("mandible_pms.svg")
colors<-control_list[[3]]$col.node
phylomorphospace(tree, pcs[[3]][,1:2], label=c("off"), node.size=c(0,1.2), control=control_list[[3]])
	add.color.bar(0.045,sort(colors[colors!="black"]),title="Rates",lims=range(all_rates2[[3]]$branch_rates[-60]),digits=10,prompt=FALSE,
	x=0.01*par()$usr[1],y=0.8*par()$usr[3])
dev.off()

############################################################################################################################################
##############################################################BAMM##########################################################################
############################################################################################################################################
#
#tr <- read.tree("AKO_TREE.nwk")#read tree
#
###Read bammdata - BAMM outputs from two parallel runs
#edata1 <- getEventData(tr, eventdata = "event_data_1.txt", burnin=0.25)
#edata2 <- getEventData(tr, eventdata = "event_data_2.txt", burnin=0.25)
#mcmcout1 <- read.csv("mcmc_out_1.txt", header=T)
#mcmcout2 <- read.csv("mcmc_out_2.txt", header=T)
#
###Assessing MCMC convergence
##plot the log-likelihood trace of your MCMC output file
#par(mfrow=c(2,1))
#plot(mcmcout1$logLik ~ mcmcout1$generation)
#plot(mcmcout2$logLik ~ mcmcout2$generation)
#
##burn-in
#burnstart <- floor(0.25 * nrow(mcmcout1))
#postburn1 <- mcmcout1[burnstart:nrow(mcmcout1),]
#postburn2 <- mcmcout2[burnstart:nrow(mcmcout2),]
#
##assess ESS
#effectiveSize(postburn1$N_shifts)
#effectiveSize(postburn1$logLik)
#effectiveSize(postburn2$N_shifts)
#effectiveSize(postburn2$logLik)
#
##How many rate shifts?
#shift_probs_1 <- summary(edata1)
#shift_probs_2 <- summary(edata2)
#
##Bayesian credible sets of shift configurations
#css1 <- credibleShiftSet(edata1, expectedNumberOfShifts=1, threshold=5, set.limit = 0.95)
#css1$number.distinct
#summary(css1)
#css2 <- credibleShiftSet(edata1, expectedNumberOfShifts=1, threshold=5, set.limit = 0.95)
#css2$number.distinct
#summary(css2)
#
##Single best shift configuration
#best1 <- getBestShiftConfiguration(edata1, expectedNumberOfShifts=1)
#best2 <- getBestShiftConfiguration(edata2, expectedNumberOfShifts=1)
#par(mfrow=c(1,1))
#plot(best1, lwd = 2)
#addBAMMshifts(best1, cex=2.5)
#plot(best2, lwd = 2)
#addBAMMshifts(best2, cex=2.5)
#
##Obtaining tip lambda, mu and diversification rates
#lambda1<-edata1$meanTipLambda
#mu1<-edata1$meanTipMu
#diversification1<-lambda1-mu1
#diversification1
#
#lambda2<-edata2$meanTipLambda
#mu2<-edata2$meanTipMu
#diversification2<-lambda2-mu2
#diversification2
#
#div_all<-data.frame(diversification1, diversification2)
#div_all$mean<-"x"
#for (i in 1:length(div_all[,1]))
#{
#	div_all$mean[i]<-round(mean(div_all$diversification1[i],div_all$diversification2[i]),6)
#}
#BAMM_DR<-data.frame(tr$tip.label, div_all$mean)
#colnames(BAMM_DR)<-c("species","div")
#BAMM_DR
#write.csv(BAMM_DR,"BAMM_DR.csv")
#
############################################################################################################################################
##############################################################HEATMAP#######################################################################
############################################################################################################################################

#RAW_DATA
BAMM_DR<-read.csv("BAMM_DR.csv")
BAMM_DR<-BAMM_DR[order(BAMM_DR$species),]
BAMM_DR
DV<-as.data.frame(PD[[1]])
DL<-as.data.frame(PD[[2]])
DM<-as.data.frame(PD[[3]])
size<-as.matrix(size_avg[,2])
rownames(size)<-size_avg[,1]
data<-data.frame(ako_rates,DV,DL,DM,size,as.numeric(BAMM_DR$div))
rownames(data)<-NULL
data

#Z-SCORES
dd<-dim(data)
data2<-as.data.frame(matrix(nrow=dd[1],ncol=dd[2]))
for (i in 2:dd[2])
{
	data2[,i]<-(data[,i] - mean(data[,i]))/(sd(data[,i]))
}
data3<-data2[,-1]
rownames(data3)<-data[,1]
colnames(data3)<-c("RV","RL","RM","RS","DV","DL","DM","SZ","DR")
data3
write.csv(data3,"ako_data.csv")

#TREE
tr<-read.tree("AKO_TREE.nwk")
labels<-as.data.frame(tr$tip.label)
colnames(labels)<-"taxa"
sep<-separate(labels,taxa,c("G","S"),sep="_")
unt<-unite(sep,taxa,c("G","S"),sep=" ")
tr$tip.label<-unt$taxa
d<- data.frame(node=c(1:117),color=c(rep("blue",51),rep("red",8),"black",rep("blue",50),rep("red",7)))
tree<-revts(ggtree(tr, layout = "rectangular", ladderize=TRUE, size=1, right=TRUE)%<+% d + aes(color=I(color),legend=T)) +
geom_tiplab(size=3.5, color="black", fontface = 3, align = T) + xlim_tree(12) +
scale_x_continuous(breaks=seq(-8,0,1), labels=abs(seq(-8,0,1))) + theme_tree2()
tree

rownames(data3)<-sort(unt$taxa)
map<-gheatmap(tree, data3, offset=4, width=1, colnames=FALSE, legend_title="SD units",low = "white", high = "black",
colnames_position = "bottom", colnames_angle = 0, hjust = 0.5, colnames_offset_y=0) +
scale_x_ggtree(breaks=seq(-8,0,1), labels=abs(seq(-8,0,1))) + theme(legend.position="bottom", axis.text = element_text(size = 13),
legend.title = element_text(size=13),legend.text = element_text(size=13))
map
ggsave("ako_heatmap.pdf",map,width=10,height=10)
ggsave("ako_heatmap.svg",map,width=10,height=10)

############################################################################################################################################
##############################################################GLS##########################################################################
############################################################################################################################################

#GLS of rates of morphological evolution x diversification before phylogenetic correction (PGLS)
#ventral
gls_div_disp_vent<-gls(DV~DR, data3)
summary(gls_div_disp_vent)

#lateral
gls_div_disp_lat<-gls(DL~DR, data3)
summary(gls_div_disp_lat)


#jaw
gls_div_disp_jaw<-gls(DM~DR, data3)
summary(gls_div_disp_jaw)


#size
gls_div_size<-gls(SZ~DR, data3)
summary(gls_div_size)
############################################################################################################################################
##############################################################PGLS##########################################################################
############################################################################################################################################

#comparative_data_file
data3$labels<-rownames(data3)
cd<-comparative.data(data=data3, phy=tr, names.col=labels, vcv=TRUE)

#PGLS_models (8 models)

div_disp_vent<-pgls(DV~DR, cd, lambda="ML")
div_disp_lat<-pgls(DL~DR, cd, lambda="ML")
div_disp_jaw<-pgls(DM~DR, cd, lambda="ML")
div_size<-pgls(SZ~DR, cd, lambda="ML")

div_rate_vent<-pgls(RV~DR, cd, lambda="ML")
div_rate_lat<-pgls(RL~DR, cd, lambda="ML")
div_rate_jaw<-pgls(RM~DR, cd, lambda="ML")
div_rate_size<-pgls(RS~DR, cd, lambda="ML")

disp_rate_vent<-pgls(DV~RV, cd, lambda="ML")
disp_rate_lat<-pgls(DL~RL, cd, lambda="ML")
disp_rate_jaw<-pgls(DM~RM, cd, lambda="ML")

options(scipen = 100)
models<-c(colnames(data)[1:8],"D_R_vent","D_R_lat","D_R_jaw")
slope<-round(c(summary(div_disp_lat)$coefficients[2],summary(div_disp_vent)$coefficients[2],summary(div_disp_jaw)$coefficients[2],
summary(div_size)$coefficients[2],summary(div_rate_lat)$coefficients[2],summary(div_rate_vent)$coefficients[2],
summary(div_rate_jaw)$coefficients[2],summary(div_rate_size)$coefficients[2],
summary(disp_rate_lat)$coefficients[2],summary(disp_rate_vent)$coefficients[2],summary(disp_rate_jaw)$coefficients[2]),6)
pvalue<-round(c(summary(div_disp_lat)$coefficients[8],summary(div_disp_vent)$coefficients[8],summary(div_disp_jaw)$coefficients[8],
summary(div_size)$coefficients[8],summary(div_rate_lat)$coefficients[8],summary(div_rate_vent)$coefficients[8],
summary(div_rate_jaw)$coefficients[8],summary(div_rate_size)$coefficients[8],
summary(disp_rate_lat)$coefficients[8],summary(disp_rate_vent)$coefficients[8],summary(disp_rate_jaw)$coefficients[8]),6)
aicc<-c(div_disp_lat$aicc,div_disp_vent$aicc,div_disp_jaw$aicc,div_size$aicc,div_rate_lat$aicc,div_rate_vent$aicc,div_rate_jaw$aicc,div_rate_size$aicc,
disp_rate_lat$aicc,disp_rate_vent$aicc,disp_rate_jaw$aicc)
aicw<-as.numeric(aic.w(aicc))
summary<-data.frame(models,slope,pvalue)
colnames(summary)<-c("Model","Slope","p-value")
summary$Model<-c("Cranial disparity (lateral view) x Diversification rates","Cranial disparity (ventral view) x Diversification rates",
"Mandibular disparity x Diversification rates","Size x Diversification rates","Cranial evolutionary rates (lateral view)  x Diversification rates","Cranial evolutionary rates (ventral view) x Diversification rates",
"Mandibular evolutionary rates x Diversification rates","Size evolutionary rates x Diversification rates",
"Cranial disparity x Evolutionary rates (lateral view)","Cranial disparity x Evolutionary rates (ventral view)","Mandibular disparity x Evolutionary rates")
summary
write.csv(summary,"pgls_tip_summary.csv")

pdf("pgls_plots.pdf")
par(mfrow=c(2,2))
plot.pgls(div_disp_lat)
plot.pgls(div_disp_vent)
plot.pgls(div_disp_jaw)
plot.pgls(div_size)
plot.pgls(div_rate_lat)
plot.pgls(div_rate_vent)
plot.pgls(div_rate_jaw)
plot.pgls(div_rate_size)
plot.pgls(disp_rate_lat)
plot.pgls(disp_rate_vent)
plot.pgls(disp_rate_jaw)
dev.off()
